///////////////////////////////////////////
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>
unsigned int reverse_bit(unsigned int val){
	unsigned int sum = 0;
	int i;
	for (i = 0; i < 32;i++){
		sum+=((val >> (i - 1)) & 1)*pow(2, 32 - i);
	}
	return sum;
}
unsigned int reverse_bit2(unsigned int val){
	unsigned int temp = 0;
	int i;
	for (i = 0; i < 32; i++){
		//保存获取的值
		temp = temp << 1;
		//把val的第i位保存在temp的第一位
		temp = temp | ((val >> i) & 1);
	}
	return temp;
}
int main(){
	unsigned int val;
	scanf("%u",&val);
	printf("%u\n",reverse_bit(val));
	printf("%u\n", reverse_bit2(val));
	system("pause");
	return 0;
} 
///////////////////////////////////////////
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>
//直接(a+b)/2,溢出风险大
//1.a+(b-a)>>1   a+(b-a)/2=a+b/2-a/2=(b+a)/2
//2.a&b+(a^b)>>1=(a+b)/2
int avg(int a, int b){
	return a + ((b - a) >> 1);
}
int avg2(int a, int b){
	return (a&b) + ((a^b) >> 1);
}
int avg3(int a,int b){
	return (a + b) / 2;

}
int main(){
	int a, b;
	scanf("%d %d",&a,&b);
	printf("%d\n", avg(a,b));
	printf("%d\n", avg2(a, b));
	printf("%d\n", avg3(a, b));
	system("pause");
	return 0;
} 
///////////////////////////////////////////
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>
int find(int a[], int n){
	//0^n=n
	int ret = 0;
	//ret=a[0]
	int i;
	for (i = 0; i < n; i++){
		ret ^= a[i];
	}
	return ret;
}
int main(){
	int a[] = { 1, 2, 3, 0, 14, 8, 9, 1, 2, 3, 0, 9, 8 };
	printf("%d\n",find(a,sizeof(a)/sizeof(a[0])));
	system("pause");
	return 0;
} 
///////////////////////////////////////////
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>
int mystrlen(char* str){
	int count = 0;
	while (*str++){
		count++;
	}
	return count;
}
void reverse_string(char* start,char* end){
	while (start < end){
		char temp = *start;
		*start = *end;
		*end = temp;
		start++;
		end--;
	}
}
void reverse(char* str){
	int len = mystrlen(str);
	char* start = str;
	char* end = str + len - 1;
	char* cur = str;
	//整体逆转一次
	reverse_string(start,end);
	//局部逆转
	while (*cur){
		char* st = cur;
		//寻找子串尾点
		while (*cur != ' '&&*cur != '\0'){
			cur++;
		}
		//逆转子串
		reverse_string(st, cur - 1);
		if (*cur == ' '){
			cur++;
		}
	}
}
int main(){
	char str[100];
	gets(str);
	//scanf("%s",str);
	reverse(str);
	printf("%s",str);
	system("pause");
	return 0;
} 
